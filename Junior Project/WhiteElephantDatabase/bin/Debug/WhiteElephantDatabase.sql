/*
Deployment script for WhiteElephantDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WhiteElephantDatabase"
:setvar DefaultFilePrefix "WhiteElephantDatabase"
:setvar DefaultDataPath "C:\Users\Matt\AppData\Local\Microsoft\VisualStudio\SSDT\OITJP2016"
:setvar DefaultLogPath "C:\Users\Matt\AppData\Local\Microsoft\VisualStudio\SSDT\OITJP2016"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key db3a690c-2646-4951-b687-8b51586b0a2c is skipped, element [dbo].[Password].[Id] (SqlSimpleColumn) will not be renamed to PasswordId';


GO
PRINT N'Rename refactoring operation with key 748b8777-2240-4205-8edf-85ad19eb8a15 is skipped, element [dbo].[UserTable].[UserNameId] (SqlSimpleColumn) will not be renamed to FriendlyNameId';


GO
PRINT N'Rename refactoring operation with key a2e26d25-e008-4eb4-b5d1-040fbb724c6b is skipped, element [dbo].[FriendlyName].[UserNameId] (SqlSimpleColumn) will not be renamed to FriendlyNameId';


GO
PRINT N'Rename refactoring operation with key 81cd438a-9fb0-4f3a-9f6c-868ef2387810 is skipped, element [dbo].[FriendlyName].[UserName] (SqlSimpleColumn) will not be renamed to FriendlyName';


GO
PRINT N'Creating [dbo].[FriendlyName]...';


GO
CREATE TABLE [dbo].[FriendlyName] (
    [FriendlyNameId] INT           IDENTITY (1, 1) NOT NULL,
    [FriendlyName]   VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([FriendlyNameId] ASC),
    UNIQUE NONCLUSTERED ([FriendlyName] ASC)
);


GO
PRINT N'Creating [dbo].[PasswordTable]...';


GO
CREATE TABLE [dbo].[PasswordTable] (
    [PasswordId]   INT          IDENTITY (1, 1) NOT NULL,
    [PasswordText] VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([PasswordId] ASC),
    UNIQUE NONCLUSTERED ([PasswordText] ASC)
);


GO
PRINT N'Creating [dbo].[UserTable]...';


GO
CREATE TABLE [dbo].[UserTable] (
    [UserId]         INT           IDENTITY (1, 1) NOT NULL,
    [FriendlyNameId] INT           NULL,
    [PasswordId]     INT           NOT NULL,
    [UserName]       VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC),
    UNIQUE NONCLUSTERED ([UserName] ASC)
);


GO
PRINT N'Creating [dbo].[usp_AddNewUser]...';


GO
CREATE PROCEDURE [dbo].[usp_AddNewUser]
	@UserName VARCHAR(128),
	@Password VARCHAR(64),
	@FriendlyName VARCHAR(128)
AS
/**************************************************************************
***************************************************************************
Date:		10/24/2016
Author:		Matt Dougal
Project:	White Elephant
Summary:	This procedure will add a user and password to the database.
Execution Rights granted to -- Public

***************************************************************************
**************************************************************************/

IF 1=0 BEGIN
SET FMTONLY OFF
END
BEGIN
	BEGIN TRANSACTION
	SET NOCOUNT ON;

	-- DECLARE VARIABLES
	DECLARE @FriendlyNameId INT
	DECLARE @PasswordId INT

	BEGIN TRY

		-- PROCESS FRIENDLY NAME IF EXISTS
		IF @FriendlyName IS NOT NULL
			BEGIN
				
				-- CHECK IF VALUE ALREADY EXISTS
				SELECT @FriendlyNameId = [FriendlyNameId] FROM FriendlyName WHERE [FriendlyName] = @FriendlyName

				-- VALUE WAS NOT FOUND SO ADD IT
				IF @FriendlyNameId IS NULL
					BEGIN
						INSERT INTO FriendlyName ([FriendlyName]) VALUES (@FriendlyName)
						SELECT @FriendlyNameId = SCOPE_IDENTITY()
					END
			END

		-- CHECK IF VALUE ALREADY EXISTS
		SELECT @PasswordId = [PasswordId] FROM PasswordTable WHERE [PasswordText] = @Password

		-- VALUE WAS NOT FOUND SO ADD IT
		IF @PasswordId IS NULL
			BEGIN
				INSERT INTO PasswordTable ([PasswordText]) VALUES (@Password)
				SELECT @PasswordId = SCOPE_IDENTITY()
			END

		-- ADD NEW ITEM TO USER TABLE
		INSERT INTO UserTable ([UserName], [PasswordId], [FriendlyNameId])
		VALUES (@UserName, @PasswordId, @FriendlyNameId)

	END TRY
	BEGIN CATCH
              DECLARE	@ErrorMsg nvarchar(255),
						@ErrorNumber int,
						@ErrorSeverity int,
						@ErrorState int,
						@ErrorProcedure nvarchar(4000),
						@ErrorLine int,
						@ErrorMessage nvarchar(4000);
              --Get Error details
              SELECT
                     @ErrorNumber = ERROR_NUMBER(),
                     @ErrorSeverity = ERROR_SEVERITY(),
                     @ErrorState = ERROR_STATE(),
                     @ErrorProcedure = ERROR_PROCEDURE(),
                     @ErrorLine = ERROR_LINE(),
                     @ErrorMessage = ERROR_MESSAGE();
                     
              --Create new Error Message.
              SET @ErrorMsg = N'%s raised an error on line %d.' + CHAR(13) + CHAR(10) +
                                         '%s' + CHAR(13) + CHAR(10) + 
                                          'Original Error Num: %d'
              --Throw error to caller.
              RAISERROR(@ErrorMsg,
                             @ErrorSeverity,
                             @ErrorState,
                             @ErrorProcedure,
                             @ErrorLine,
                             @ErrorMessage,
                             @ErrorNumber)
              --Rollback Transaction is one is started.
              IF @@TRANCOUNT > 0
                     BEGIN
                           PRINT N'Rolling back transaction'
                           ROLLBACK TRANSACTION;
                     END    
       END CATCH

       IF @@TRANCOUNT > 0
       BEGIN
              PRINT N'Committing transaction'
              COMMIT TRANSACTION;
       END
END
GRANT EXECUTE ON [dbo].[usp_AddNewUser] TO PUBLIC AS [dbo]
GO
PRINT N'Creating [dbo].[usp_DeleteUser]...';


GO
CREATE PROCEDURE [dbo].[usp_DeleteUser]
	@UserName VARCHAR(128)
AS
/**************************************************************************
***************************************************************************
Date:		10/24/2016
Author:		Matt Dougal
Project:	White Elephant
Summary:	This procedure will delete a user and password from the database.
Execution Rights granted to -- Public

***************************************************************************
**************************************************************************/

IF 1=0 BEGIN
SET FMTONLY OFF
END
BEGIN
	BEGIN TRANSACTION
	SET NOCOUNT ON;

	-- DECLARE VARIABLES
	DECLARE @FriendlyNameId INT
	DECLARE @PasswordId INT

	BEGIN TRY
		-- GET ID'S OF CURRENT USER TABLE VALUES
		SELECT @FriendlyNameId = [FriendlyNameId] FROM UserTable WHERE [UserName] = @UserName
		SELECT @PasswordId = [PasswordId] FROM UserTable WHERE [UserName] = @UserName

		-- DELETE USERTABLE DATA
		DELETE FROM UserTable
		WHERE [UserName] = @UserName

		-- IF THE FRIENDLY NAME IS NOT USED ANYWHERE ELSE DELETE IT
		IF @FriendlyNameId IS NOT NULL
			BEGIN
				IF (SELECT COUNT(*) FROM UserTable WHERE [FriendlyNameId] = @FriendlyNameId) = 0
					DELETE FROM FriendlyName WHERE [FriendlyNameId] = @FriendlyNameId
			END

		-- IF THE PASSWORD IS NOT USED ANYWHERE ELSE DELETE IT
		IF (SELECT COUNT(*) FROM UserTable WHERE [PasswordId] = @PasswordId) = 0
			DELETE FROM PasswordTable WHERE [PasswordId] = @PasswordId

	END TRY
	BEGIN CATCH
              DECLARE	@ErrorMsg nvarchar(255),
						@ErrorNumber int,
						@ErrorSeverity int,
						@ErrorState int,
						@ErrorProcedure nvarchar(4000),
						@ErrorLine int,
						@ErrorMessage nvarchar(4000);
              --Get Error details
              SELECT
                     @ErrorNumber = ERROR_NUMBER(),
                     @ErrorSeverity = ERROR_SEVERITY(),
                     @ErrorState = ERROR_STATE(),
                     @ErrorProcedure = ERROR_PROCEDURE(),
                     @ErrorLine = ERROR_LINE(),
                     @ErrorMessage = ERROR_MESSAGE();
                     
              --Create new Error Message.
              SET @ErrorMsg = N'%s raised an error on line %d.' + CHAR(13) + CHAR(10) +
                                         '%s' + CHAR(13) + CHAR(10) + 
                                          'Original Error Num: %d'
              --Throw error to caller.
              RAISERROR(@ErrorMsg,
                             @ErrorSeverity,
                             @ErrorState,
                             @ErrorProcedure,
                             @ErrorLine,
                             @ErrorMessage,
                             @ErrorNumber)
              --Rollback Transaction is one is started.
              IF @@TRANCOUNT > 0
                     BEGIN
                           PRINT N'Rolling back transaction'
                           ROLLBACK TRANSACTION;
                     END    
       END CATCH

       IF @@TRANCOUNT > 0
       BEGIN
              PRINT N'Committing transaction'
              COMMIT TRANSACTION;
       END
END
GRANT EXECUTE ON [dbo].[usp_DeleteUser] TO PUBLIC AS [dbo]
GO
PRINT N'Creating [dbo].[usp_UpdateUser]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateUser]
	@UserName VARCHAR(128),
	@NewFriendlyName VARCHAR(128),
	@NewPassword VARCHAR(64)
AS
/**************************************************************************
***************************************************************************
Date:		10/24/2016
Author:		Matt Dougal
Project:	White Elephant
Summary:	This procedure will update a user in the database.
Execution Rights granted to -- Public

***************************************************************************
**************************************************************************/

IF 1=0 BEGIN
SET FMTONLY OFF
END
BEGIN
	BEGIN TRANSACTION
	SET NOCOUNT ON;

	-- DECLARE VARIABLES
	DECLARE @OldFriendlyNameId INT
	DECLARE @OldPasswordId INT
	DECLARE @NewFriendlyNameId INT
	DECLARE @NewPasswordId INT

	BEGIN TRY
		
		-- GET ID'S OF CURRENT USER TABLE VALUES
		SELECT @OldFriendlyNameId = [FriendlyNameId] FROM UserTable WHERE [UserName] = @UserName
		SELECT @OldPasswordId = [PasswordId] FROM UserTable WHERE [UserName] = @UserName

		-- UPDATE FRIENDLY NAME
		IF @NewFriendlyName IS NOT NULL
			BEGIN
				SELECT @NewFriendlyNameId = [FriendlyNameId] FROM FriendlyName WHERE [FriendlyName] = @NewFriendlyName

				-- VALUE DOES NOT EXIST YET
				IF @NewFriendlyNameId IS NULL
					BEGIN
						INSERT INTO FriendlyName ([FriendlyName]) VALUES (@NewFriendlyName)
						SELECT @NewFriendlyNameId = SCOPE_IDENTITY()
					END
			END
		ELSE 
			SET @NewFriendlyNameId = @OldFriendlyNameId

		-- UPDATE PASSWORD
		IF @NewPassword IS NOT NULL
			BEGIN
				SELECT @NewPasswordId = [PasswordId] FROM PasswordTable WHERE [PasswordText] = @NewPassword

				-- VALUE DOES NOT EXIST YET
				IF @NewPasswordId IS NULL
					BEGIN
						INSERT INTO PasswordTable ([PasswordText]) VALUES (@NewPassword)
						SELECT @NewPasswordId = SCOPE_IDENTITY()
					END
			END
		ELSE
			SET @NewPasswordId = @OldPasswordId

		-- UPDATE USER TABLE WITH NEW VALUES
		UPDATE UserTable
		SET [FriendlyNameId ] = @NewFriendlyNameId, [PasswordId] = @NewPasswordId
		WHERE [UserName] = @UserName

		-- IF THE FRIENDLY NAME IS NOT USED ANYWHERE ELSE DELETE IT
		IF (SELECT COUNT(*) FROM UserTable WHERE [FriendlyNameId] = @OldFriendlyNameId) = 0
				DELETE FROM FriendlyName WHERE [FriendlyNameId] = @OldFriendlyNameId

		-- IF THE PASSWORD IS NOT USED ANYWHERE ELSE DELETE IT
		IF (SELECT COUNT(*) FROM UserTable WHERE [PasswordId] = @OldPasswordId) = 0
			DELETE FROM PasswordTable WHERE [PasswordId] = @OldPasswordId

	END TRY
	BEGIN CATCH
              DECLARE	@ErrorMsg nvarchar(255),
						@ErrorNumber int,
						@ErrorSeverity int,
						@ErrorState int,
						@ErrorProcedure nvarchar(4000),
						@ErrorLine int,
						@ErrorMessage nvarchar(4000);
              --Get Error details
              SELECT
                     @ErrorNumber = ERROR_NUMBER(),
                     @ErrorSeverity = ERROR_SEVERITY(),
                     @ErrorState = ERROR_STATE(),
                     @ErrorProcedure = ERROR_PROCEDURE(),
                     @ErrorLine = ERROR_LINE(),
                     @ErrorMessage = ERROR_MESSAGE();
                     
              --Create new Error Message.
              SET @ErrorMsg = N'%s raised an error on line %d.' + CHAR(13) + CHAR(10) +
                                         '%s' + CHAR(13) + CHAR(10) + 
                                          'Original Error Num: %d'
              --Throw error to caller.
              RAISERROR(@ErrorMsg,
                             @ErrorSeverity,
                             @ErrorState,
                             @ErrorProcedure,
                             @ErrorLine,
                             @ErrorMessage,
                             @ErrorNumber)
              --Rollback Transaction is one is started.
              IF @@TRANCOUNT > 0
                     BEGIN
                           PRINT N'Rolling back transaction'
                           ROLLBACK TRANSACTION;
                     END    
       END CATCH

       IF @@TRANCOUNT > 0
       BEGIN
              PRINT N'Committing transaction'
              COMMIT TRANSACTION;
       END
END
GRANT EXECUTE ON [dbo].[usp_UpdateUser] TO PUBLIC AS [dbo]
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db3a690c-2646-4951-b687-8b51586b0a2c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db3a690c-2646-4951-b687-8b51586b0a2c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '748b8777-2240-4205-8edf-85ad19eb8a15')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('748b8777-2240-4205-8edf-85ad19eb8a15')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a2e26d25-e008-4eb4-b5d1-040fbb724c6b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a2e26d25-e008-4eb4-b5d1-040fbb724c6b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '81cd438a-9fb0-4f3a-9f6c-868ef2387810')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('81cd438a-9fb0-4f3a-9f6c-868ef2387810')

GO

GO
PRINT N'Update complete.';


GO
